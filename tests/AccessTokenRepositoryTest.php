<?php

/*
 * This file is part of the Laravel-Doctrine-Sanctum project.
 * (c) Ricardo Mosselman <mosselmanricardo@gmail.com>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Tests\Bolivir\LaravelDoctrineSanctum;

use Bolivir\LaravelDoctrineSanctum\Contracts\IAccessToken;
use Bolivir\LaravelDoctrineSanctum\Contracts\ISanctumUser;
use Bolivir\LaravelDoctrineSanctum\NewAccessToken;
use Bolivir\LaravelDoctrineSanctum\Repository\AccessTokenRepository;
use Bolivir\LaravelDoctrineSanctum\Repository\IAccessTokenRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ObjectRepository;
use PHPUnit\Framework\MockObject\MockObject;
use Tests\Bolivir\LaravelDoctrineSanctum\Fixtures\TestToken;

class AccessTokenRepositoryTest extends TestCase
{
    /** @var EntityManagerInterface|MockObject */
    private $user;
    /** @var EntityManagerInterface|MockObject */
    private $token;

    /** @var IAccessTokenRepository */
    private $tokenRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $config = config();
        $this->user = $this->createMock(EntityManagerInterface::class);
        $this->token = $this->createMock(EntityManagerInterface::class);
        $this->tokenRepository = new AccessTokenRepository(
            $this->token,
            TestToken::class
        );
    }

    public function testCanCreateToken(): void
    {
        $user = $this->createMock(ISanctumUser::class);

        $this->token->expects($this->once())
            ->method('persist')
            ->with($this->isInstanceOf(IAccessToken::class));
        $this->token->expects($this->once())
            ->method('flush');

        $newAccessToken = $this->tokenRepository->createToken($user, 'test');
        $this->assertInstanceOf(NewAccessToken::class, $newAccessToken);
    }

    public function testCanFindToken(): void
    {
        $repoMock = $this->createMock(ObjectRepository::class);
        $tokenMock = $this->createMock(IAccessToken::class);

        $this->token->expects($this->once())
            ->method('getRepository')
            ->with(TestToken::class)
            ->willReturn($repoMock);

        $repoMock->expects($this->once())
            ->method('findOneBy')
            ->with(['token' => hash('sha256', 'foo-token')])
            ->willReturn($tokenMock);

        $token = $this->tokenRepository->findToken('foo-token');
        $this->assertSame($tokenMock, $token);
    }
}
